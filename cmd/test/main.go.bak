package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/pelletier/go-toml"
)

type VMStatus struct {
	ID    string
	Name  string
	State string
}

type Snapshot struct {
	ID           string
	Name         string
	CreationTime time.Time
}

// VirtualizationProvider interface
type VirtualizationProvider interface {
	LoadVMs(config *toml.Tree) error
	List() ([]VMStatus, error)
	ListSnapshots(vmName string) ([]Snapshot, error)
	TakeSnapshot(vmName, snapshotName string) error
	RestoreSnapshot(vmName, snapshotName string) error
	Start(vmName string) error
	Stop(vmName string, force bool) error
	Suspend(vmName string) error
	Reset(vmName string) error
}

// VmwareVP struct
type VmwareVP struct {
	InstallPath string
	VMs         map[string]VM
}

// HypervVP struct
type HypervVP struct {
	VMs map[string]VM
}

// VM struct for storing VM details
type VM struct {
	ID   string
	Path string
}

// LoadVMs for VmwareVP
func (v *VmwareVP) LoadVMs(config *toml.Tree) error {
	// Load VMware install path
	installPath := config.Get("vmware.install_path")
	if installPath != nil {
		v.InstallPath = installPath.(string)
	}

	// Load VMware VMs
	v.VMs = make(map[string]VM)
	vmNodes := config.Get("vmware.vm")
	if vmNodes != nil {
		for key, node := range vmNodes.(*toml.Tree).ToMap() {
			vmTree := node.(map[string]interface{})
			v.VMs[key] = VM{
				ID:   vmTree["id"].(string),
				Path: vmTree["path"].(string),
			}
		}
	}

	return nil
}

func (v *VmwareVP) List() ([]VMStatus, error) {
	output, err := v.ExecVmrun("list")
	if err != nil {
		return nil, fmt.Errorf("%s (%v)", output, err)
	}
	// Parse the output of vmrun list
	lines := strings.Split(string(output), "\n")
	runningVMs := make(map[string]bool)
	for _, line := range lines[1:] { // Skip the first line: "Total running VMs: X"
		line = strings.TrimSpace(line)
		if line != "" {
			runningVMs[line] = true
		}
	}

	// Check registered VMs and determine their states
	var vms []VMStatus
	for vmName, vm := range v.VMs {
		state := "stopped" // Default state
		if runningVMs[vm.Path] {
			state = "running"
		} else {
			// If not running, check the checkpoint.vmState in the .vmx file
			vmxContent, err := os.ReadFile(vm.Path)
			if err != nil {
				return nil, fmt.Errorf("failed to read .vmx file for VM %s: %v", vmName, err)
			}

			vmxLines := strings.Split(string(vmxContent), "\n")
			for _, vmxLine := range vmxLines {
				if strings.HasPrefix(vmxLine, "checkpoint.vmState") {
					// Parse the vmState value
					parts := strings.SplitN(vmxLine, "=", 2)
					if len(parts) == 2 {
						vmState := strings.Trim(strings.TrimSpace(parts[1]), "\"")
						if vmState != "" {
							state = "suspended"
						}
					}
					break
				}
			}
		}

		// Append VM details
		vms = append(vms, VMStatus{
			ID:    vm.ID,
			Name:  vmName,
			State: state,
		})
	}

	return vms, nil
}

func (v *VmwareVP) ListSnapshots(vmName string) ([]Snapshot, error) {
	vm, exists := v.VMs[vmName]
	if !exists {
		return nil, nil // VM not found
	}

	output, err := v.ExecVmrun("listSnapshots", vm.Path)
	if err != nil {
		return nil, fmt.Errorf("%s (%v)", output, err)
	}

	lines := strings.Split(output, "\n")
	if len(lines) < 2 {
		return nil, nil // No snapshots
	}

	var snapshots []Snapshot
	for _, line := range lines[1:] { // Skip the first line (total count)
		name := strings.TrimSpace(line)
		if name != "" {
			snapshots = append(snapshots, Snapshot{Name: name})
		}
	}
	return snapshots, nil
}

func (v *VmwareVP) Start(vmName string) error {
	vm, exists := v.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}

	output, err := v.ExecVmrun("start", vm.Path)
	if err != nil {
		return fmt.Errorf("%s (%v)", output, err)
	}
	return nil
}

func (v *VmwareVP) Stop(vmName string, force bool) error {
	vm, exists := v.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}

	forceCmd := map[bool]string{true: "hard", false: "soft"}[force]
	output, err := v.ExecVmrun("stop", vm.Path, forceCmd)
	if err != nil {
		return fmt.Errorf("%s (%v)", output, err)
	}
	return nil
}

func (v *VmwareVP) Suspend(vmName string) error {
	vm, exists := v.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}

	output, err := v.ExecVmrun("suspend", vm.Path)
	if err != nil {
		return fmt.Errorf("%s (%v)", output, err)
	}
	return nil
}

func (v *VmwareVP) Reset(vmName string) error {
	vm, exists := v.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}

	output, err := v.ExecVmrun("reset", vm.Path)
	if err != nil {
		return fmt.Errorf("%s (%v)", output, err)
	}
	return nil
}

func (v *VmwareVP) ExecVmrun(args ...string) (string, error) {
	vmrunPath := filepath.Join(v.InstallPath, "vmrun.exe")
	cmd := exec.Command(vmrunPath,
		append([]string{"-T", "ws"}, args...)...)

	stdOutBuf, stdErrBuf := new(strings.Builder), new(strings.Builder)
	cmd.Stdout = stdOutBuf
	cmd.Stderr = stdErrBuf

	err := cmd.Run()
	// strStdout := stdOutBuf.String()
	strStdout := strings.TrimSuffix(stdOutBuf.String(), "\r\n")
	if err != nil {
		if exiterr, ok := err.(*exec.ExitError); ok {
			// Error are in stdout not stderr
			return strStdout, fmt.Errorf("exit status: %08x", exiterr.ExitCode())
		} else {
			return "", fmt.Errorf("cmd.Wait %v", err)
		}
	}

	return strStdout, nil
}

func (v *VmwareVP) TakeSnapshot(vmName, snapshotName string) error {
	vm, exists := v.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}

	output, err := v.ExecVmrun("snapshot", vm.Path, snapshotName)
	if err != nil {
		return fmt.Errorf("%s (%v)", output, err)
	}

	return nil
}

func (v *VmwareVP) RestoreSnapshot(vmName, snapshotName string) error {
	vm, exists := v.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}

	output, err := v.ExecVmrun("revertToSnapshot", vm.Path, snapshotName)
	if err != nil {
		return fmt.Errorf("%s (%v)", output, err)
	}

	return nil
}

// LoadVMs for HypervVP
func (h *HypervVP) LoadVMs(config *toml.Tree) error {
	// Load Hyper-V VMs
	h.VMs = make(map[string]VM)
	vmNodes := config.Get("hyperv.vm")
	if vmNodes != nil {
		for key, node := range vmNodes.(*toml.Tree).ToMap() {
			vmTree := node.(map[string]interface{})
			h.VMs[key] = VM{
				ID:   vmTree["id"].(string),
				Path: "", // Hyper-V VMs don't have a "path" field
			}
		}
	}
	return nil
}

func (h *HypervVP) List() ([]VMStatus, error) {
	cmd := exec.Command("powershell", "-Command", "Get-VM | Select-Object Id,Name,State | ConvertTo-Json")
	output, err := cmd.Output()
	if err != nil {
		return nil, err
	}

	// Parse JSON output
	var vms []struct {
		ID    string `json:"Id"`
		Name  string `json:"Name"`
		State int    `json:"State"`
	}
	if err := json.Unmarshal(output, &vms); err != nil {
		return nil, err
	}

	// Map state codes to human-readable states
	stateMap := map[int]string{
		2: "running",
		3: "stopped",
		6: "saved",
		9: "suspended",
	}

	// Match with the config
	var results []VMStatus
	for _, vm := range vms {
		if _, exists := h.VMs[vm.Name]; exists {
			results = append(results, VMStatus{
				ID:    vm.ID,
				Name:  vm.Name,
				State: stateMap[vm.State],
			})
		}
	}
	return results, nil
}

func (h *HypervVP) ListSnapshots(vmName string) ([]Snapshot, error) {
	cmd := exec.Command("powershell",
		"-Command",
		fmt.Sprint("Get-VMSnapshot -VMName \"%s\" | Select-Object Id, Name, CreationTime | ConvertTo-Json", vmName))
	output, err := cmd.Output()
	println(string(output))
	if err != nil {
		return nil, err
	}
	// Parse JSON output
	var snapshots []struct {
		ID           string `json:"Id"`
		Name         string `json:"Name"`
		CreationTime string `json:"CreationTime"`
	}
	if err := json.Unmarshal(output, &snapshots); err != nil {
		return nil, err
	}

	// Convert to Snapshot struct
	var results []Snapshot
	for _, snap := range snapshots {
		creationTime, err := parseMicrosoftDate(snap.CreationTime)
		if err != nil {
			fmt.Printf("Error parsing date: %v\n", err)
			continue
		}
		results = append(results, Snapshot{
			ID:           snap.ID,
			Name:         snap.Name,
			CreationTime: creationTime,
		})
	}
	return results, nil
}

func (h *HypervVP) Start(vmName string) error {
	_, exists := h.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}
	cmd := exec.Command("powershell",
		"-Command",
		fmt.Sprintf("Start-VM -VMName %s", vmName))
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("failed to start VM %s: %v, output: %s", vmName, err, string(output))
	}
	return nil
}

func (h *HypervVP) Stop(vmName string, force bool) error {
	_, exists := h.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}

	forceCmd := map[bool]string{true: "-TurnOff", false: ""}[force]
	cmd := exec.Command("powershell",
		"-Command",
		fmt.Sprintf("Stop-VM %s -Name %s", forceCmd, vmName))
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("failed to stop VM %s: %v, output: %s", vmName, err, string(output))
	}
	return nil
}

func (h *HypervVP) Suspend(vmName string) error {
	_, exists := h.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}
	cmd := exec.Command("powershell",
		"-Command",
		fmt.Sprintf("Suspend-VM -VMName %s", vmName))
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("failed to suspend VM %s: %v, output: %s", vmName, err, string(output))
	}
	return nil
}

func (h *HypervVP) Reset(vmName string) error {
	_, exists := h.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}
	cmd := exec.Command("powershell",
		"-Command",
		fmt.Sprintf("Reboot-VM -VMName %s", vmName))
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("failed to reset VM %s: %v, output: %s", vmName, err, string(output))
	}
	return nil
}

func (h *HypervVP) TakeSnapshot(vmName, snapshotName string) error {
	_, exists := h.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}
	cmd := exec.Command("powershell",
		"-Command",
		fmt.Sprintf("Checkpoint-VM -SnapshotName %s -VMName %s", snapshotName, vmName))
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("failed to snapshot VM %s: %v, output: %s", vmName, err, string(output))
	}
	return nil
}

func (h *HypervVP) RestoreSnapshot(vmName, snapshotName string) error {
	_, exists := h.VMs[vmName]
	if !exists {
		return fmt.Errorf("VM %s not found in configuration", vmName)
	}
	cmd := exec.Command("powershell",
		"-Command",
		fmt.Sprintf("Restore-VMSnapshot -SnapshotName %s -VMName %s", snapshotName, vmName))
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("failed to restore snapshot VM %s: %v, output: %s", vmName, err, string(output))
	}
	return nil
}

func parseMicrosoftDate(msDate string) (time.Time, error) {
	// Use a regex to extract the numeric timestamp
	re := regexp.MustCompile(`/Date\((\d+)\)/`)
	matches := re.FindStringSubmatch(msDate)
	if len(matches) < 2 {
		return time.Time{}, fmt.Errorf("invalid Microsoft date format: %s", msDate)
	}

	// Convert the timestamp to an integer
	msTimestamp, err := strconv.ParseInt(matches[1], 10, 64)
	if err != nil {
		return time.Time{}, err
	}

	// Convert milliseconds to seconds and parse the Unix time
	return time.UnixMilli(msTimestamp), nil
}

func manageVM(provider VirtualizationProvider, vmName string) {
	err := provider.Start(vmName)
	if err != nil {
		fmt.Printf("Error starting VM %s: %v\n", vmName, err)
		return
	}
	fmt.Printf("VM %s started successfully.\n", vmName)

	vms, _ := provider.List()
	for _, vm := range vms {
		if vm.Name == vmName && vm.State == "running" {
			fmt.Printf("VM %s is running.\n", vmName)
		}
	}
	time.Sleep(3 * time.Second)
	err = provider.Suspend(vmName)
	if err != nil {
		fmt.Printf("Error stopping VM %s: %v\n", vmName, err)
		return
	}
	fmt.Printf("VM %s stopped successfully.\n", vmName)

	vms, _ = provider.List()
	for _, vm := range vms {
		if vm.Name == vmName {
			fmt.Printf("VM %s is %s.\n", vmName, vm.State)
		}
	}
	time.Sleep(3 * time.Second)
}

func snapVM(provider VirtualizationProvider, vmName string) {
	err := provider.TakeSnapshot(vmName, "test1")
	if err != nil {
		fmt.Printf("%s\n", err)
	}
	time.Sleep(3 * time.Second)
	provider.RestoreSnapshot(vmName, "test1")
}

// Main function
func main() {
	// Load the TOML file
	config, err := toml.LoadFile("config.toml")
	if err != nil {
		log.Fatalf("Error loading TOML file: %v", err)
	}

	// Create instances of the providers
	vmware := &VmwareVP{}
	hyperv := &HypervVP{}

	// Load data into the providers
	if err := vmware.LoadVMs(config); err != nil {
		log.Fatalf("Error loading VMware VMs: %v", err)
	}
	if err := hyperv.LoadVMs(config); err != nil {
		log.Fatalf("Error loading Hyper-V VMs: %v", err)
	}

	// Print results
	fmt.Printf("VmwareVP: %+v\n", vmware)
	fmt.Printf("HypervVP: %+v\n", hyperv)

	vmwareVMs, _ := vmware.List()
	hypervVMs, _ := hyperv.List()

	fmt.Println("VMware VMs:", vmwareVMs)
	fmt.Println("Hyper-V VMs:", hypervVMs)

	snapVM(vmware, "lab-win10-anti")
	// snapVM(hyperv, "sandbox-win10-001")
	//
	// // VMware Snapshots
	// vmwareSnapshots, _ := vmware.ListSnapshots("lab-win10-anti")
	// for _, snap := range vmwareSnapshots {
	// 	fmt.Printf("VMware Snapshot: %+v\n", snap)
	// }
	//
	// // Hyper-V Snapshots
	// hypervSnapshots, _ := hyperv.ListSnapshots("sandbox-win10-001")
	// for _, snap := range hypervSnapshots {
	// 	fmt.Printf("Hyper-V Snapshot: %+v\n", snap)
	// }

	// manageVM(vmware, "lab-win10-anti")
	// manageVM(hyperv, "sandbox-win10-001")
	//
}
